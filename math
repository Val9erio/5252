#include <iostream>
#include <stack>
#include <sstream>
#include <cmath>
#include <stdexcept>

using namespace std;

// Функція для обчислення факторіалу
int factorial(int n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

// Функція для обчислення виразу в ЗПН
double evaluateRPN(const string& expression) {
    stack<double> operands;
    stringstream ss(expression);
    string token;

    while (ss >> token) {
        if (isdigit(token[0]) || (token[0] == '-' && token.size() > 1)) {
            // Якщо токен - число
            operands.push(stod(token));
        } else if (token == "+" || token == "-" || token == "*" || token == "/" || token == "!") {
            // Якщо токен - оператор
            if (token == "!") {
                if (operands.empty()) throw runtime_error("Missing operand for factorial");
                double operand = operands.top();
                operands.pop();
                operands.push(factorial(static_cast<int>(operand)));
            } else {
                if (operands.size() < 2) throw runtime_error("Not enough operands");
                double b = operands.top(); operands.pop();
                double a = operands.top(); operands.pop();

                if (token == "+") operands.push(a + b);
                else if (token == "-") operands.push(a - b);
                else if (token == "*") operands.push(a * b);
                else if (token == "/") {
                    if (b == 0) throw runtime_error("Division by zero");
                    operands.push(a / b);
                }
            }
        } else {
            throw runtime_error("Unknown token: " + token);
        }
    }

    if (operands.size() != 1) throw runtime_error("Invalid RPN expression");
    return operands.top();
}

int main() {
    cout << "Enter an expression in Reverse Polish Notation (RPN): ";
    string input;
    getline(cin, input);

    try {
        double result = evaluateRPN(input);
        cout << "Result: " << result << endl;
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
